"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ValidationGenerator_1 = require("./ValidationGenerator");
const Validators_1 = require("./Validators");
let generator;
const sourceFileName = "src/ValidationGenerator.TestTypes.ts";
beforeAll(() => {
    generator = new ValidationGenerator_1.default([sourceFileName]);
});
afterAll(() => {
    generator = null;
});
function getValidator(symbol) {
    return generator.getValidator(sourceFileName, symbol);
}
function createInputTests(attrs) {
    attrs.validInputs.forEach(input => {
        const name = `valid input for "${attrs.symbol}": ${JSON.stringify(input)}`;
        it(name, () => {
            const validator = getValidator(attrs.symbol);
            expect(() => validator.validate(input)).not.toThrow();
        });
    });
    attrs.invalidInputs.forEach(input => {
        const name = `invalid input for "${attrs.symbol}": ${JSON.stringify(input)}`;
        it(name, () => {
            const validator = getValidator(attrs.symbol);
            expect(() => validator.validate(input)).toThrowError(Validators_1.ValidationError);
        });
    });
}
createInputTests({
    symbol: "EmptyType",
    validInputs: [
        {},
        { unexpected: 1 }
    ],
    invalidInputs: [
        undefined,
        null,
        [],
        ""
    ]
});
createInputTests({
    symbol: "NumberFieldTestObject",
    validInputs: [
        { aNumber: 1 },
        { aNumber: 0 }
    ],
    invalidInputs: [
        {},
        { aNumber: "not a number" },
        { aNumber: null },
        { aNumber: {} }
    ]
});
createInputTests({
    symbol: "StringFieldTestObject",
    validInputs: [
        { aString: "foo" },
        { aString: "" }
    ],
    invalidInputs: [
        {},
        { aString: 123 },
        { aString: null },
        { aString: {} }
    ]
});
createInputTests({
    symbol: "BooleanFieldTestObject",
    validInputs: [
        { aBoolean: true },
        { aBoolean: false }
    ],
    invalidInputs: [
        {},
        { aString: 123 },
        { aString: null },
        { aString: {} }
    ]
});
createInputTests({
    symbol: "OptionalFieldTestObject",
    validInputs: [
        {},
        { anOptionalNumber: 1 }
    ],
    invalidInputs: [
        { anOptionalNumber: "not a number" },
        { anOptionalNumber: null }
    ]
});
createInputTests({
    symbol: "NullableFieldTestObject",
    validInputs: [
        { aNullableNumber: 1 },
        { aNullableNumber: null }
    ],
    invalidInputs: [
        {},
        { aNullableNumber: undefined },
        { aNullableNumber: "not a number" }
    ]
});
createInputTests({
    symbol: "BooleanLiteralFieldTestObject",
    validInputs: [
        { mustBeFalse: false },
        { mustBeFalse: false, optionalTrue: true }
    ],
    invalidInputs: [
        {},
        { mustBeFalse: true },
        { mustBeFalse: false, optionalTrue: false }
    ]
});
createInputTests({
    symbol: "SwitchedUnionFieldTestObject",
    validInputs: [
        { isANumberNotAString: true, aNumber: 1 },
        { isANumberNotAString: false, aString: "hello" }
    ],
    invalidInputs: [
        {},
        { isANumberNotAString: true },
        { isANumberNotAString: false },
        { isANumberNotAString: false, aNumber: 1 },
        { isANumberNotAString: true, aString: "hello" }
    ]
});
createInputTests({
    symbol: "JustANumberAlias",
    validInputs: [
        1,
        0
    ],
    invalidInputs: [
        {},
        null,
        undefined
    ]
});
createInputTests({
    symbol: "AnonymousNestedObjectTestObject",
    validInputs: [
        { anObject: { aNumber: 1 } }
    ],
    invalidInputs: [
        {},
        { anObject: null },
        { anObject: {} }
    ]
});
createInputTests({
    symbol: "SelfReferencingTestObject",
    validInputs: [
        { aNumber: 1 },
        { aNumber: 1, anOptionalMe: { aNumber: 2 } },
        { aNumber: 1, anOptionalMe: { aNumber: 2, anOptionalMe: { aNumber: 3 } } }
    ],
    invalidInputs: [
        {},
        { aNumber: 1, anOptionalMe: {} },
        { aNumber: 1, anOptionalMe: { aNumber: 2, anOptionalMe: {} } }
    ]
});
createInputTests({
    symbol: "CycleTestObject1",
    validInputs: [
        { aNumber: 1 },
        { aNumber: 1, anOptional2: { aString: "foo" } },
        { aNumber: 1, anOptional2: { aString: "foo", anOptional1: { aNumber: 3 } } },
        { aNumber: 1, anOptional2: { aString: "foo", anOptional1: { aNumber: 3, anOptional2: { aString: "bar" } } } }
    ],
    invalidInputs: [
        {},
        { aNumber: 1, anOptional2: { aNumber: 2 } }
    ]
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFsaWRhdGlvbkdlbmVyYXRvci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1ZhbGlkYXRpb25HZW5lcmF0b3IudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLCtEQUF3RDtBQUN4RCw2Q0FBMEQ7QUFFMUQsSUFBSSxTQUE4QixDQUFDO0FBQ25DLE1BQU0sY0FBYyxHQUFHLHNDQUFzQyxDQUFDO0FBRTlELFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixTQUFTLEdBQUcsSUFBSSw2QkFBbUIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsR0FBRyxFQUFFO0lBQ1osU0FBUyxHQUFHLElBQVcsQ0FBQztBQUMxQixDQUFDLENBQUMsQ0FBQztBQUVILHNCQUFzQixNQUFjO0lBQ2xDLE9BQU8sU0FBUyxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUVELDBCQUEwQixLQUl6QjtJQUNDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2hDLE1BQU0sSUFBSSxHQUFHLG9CQUFvQixLQUFLLENBQUMsTUFBTSxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUMzRSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtZQUNaLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0MsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEtB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